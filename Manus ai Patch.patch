From 6c8082c96fd097351e5a10debb7ba285d35acbdc Mon Sep 17 00:00:00 2001
From: enjaypa-png <224029679+enjaypa-png@users.noreply.github.com>
Date: Tue, 21 Oct 2025 15:25:59 -0400
Subject: [PATCH] Add image analysis API and improve UI design

- Added OpenAI Vision-powered image analysis endpoint
- Analyzes product photos for lighting, composition, clarity, and appeal
- Completely redesigned test page with modern gradient UI
- Added tabbed interface for Listing Optimizer and Image Analysis
- Updated to use gpt-4o model for better results
- Enhanced form styling with better UX
- Added visual progress bars and score indicators
---
 app/api/image/analyze/route.ts | 217 ++++++++++++
 app/api/optimize/route.ts      |   8 +-
 app/test/page.tsx              | 603 ++++++++++++++++++++++++---------
 3 files changed, 669 insertions(+), 159 deletions(-)
 create mode 100644 app/api/image/analyze/route.ts

diff --git a/app/api/image/analyze/route.ts b/app/api/image/analyze/route.ts
new file mode 100644
index 0000000..79c0e27
--- /dev/null
+++ b/app/api/image/analyze/route.ts
@@ -0,0 +1,217 @@
+import { NextRequest, NextResponse } from 'next/server';
+import OpenAI from 'openai';
+import { z } from 'zod';
+import { randomUUID } from 'crypto';
+
+// Validate OpenAI API key
+if (!process.env.OPENAI_API_KEY) {
+  console.warn('⚠️  OPENAI_API_KEY not set in environment variables');
+}
+
+const openai = new OpenAI({
+  apiKey: process.env.OPENAI_API_KEY || '',
+});
+
+// Input validation schema
+const AnalyzeImageRequestSchema = z.object({
+  imageUrl: z.string().url('Must be a valid URL'),
+  platform: z.string().optional().default('etsy'),
+});
+
+interface ImageAnalysisResult {
+  score: number;
+  lighting: number;
+  composition: number;
+  clarity: number;
+  appeal: number;
+  feedback: string;
+  suggestions: string[];
+}
+
+// GET /api/image/analyze - Health check endpoint
+export async function GET() {
+  return NextResponse.json({
+    ok: true,
+    status: 'image analysis endpoint ready',
+    model: 'gpt-4o',
+    hasApiKey: !!process.env.OPENAI_API_KEY,
+  });
+}
+
+// POST /api/image/analyze - Analyze product image quality using OpenAI Vision
+export async function POST(request: NextRequest) {
+  const requestId = randomUUID();
+  
+  try {
+    console.log(`[${requestId}] Processing image analysis request...`);
+    
+    // Parse and validate input
+    const body = await request.json();
+    const validatedInput = AnalyzeImageRequestSchema.parse(body);
+    
+    const { imageUrl, platform } = validatedInput;
+
+    // Check if OpenAI is configured
+    if (!process.env.OPENAI_API_KEY) {
+      console.error(`[${requestId}] OpenAI API key not configured`);
+      return NextResponse.json(
+        {
+          ok: false,
+          error: {
+            code: 'missing_api_key',
+            message: 'OpenAI API key not configured',
+            requestId,
+          },
+        },
+        { status: 500 }
+      );
+    }
+
+    console.log(`[${requestId}] Analyzing image: ${imageUrl.substring(0, 50)}...`);
+
+    // Construct the AI prompt for image analysis
+    const systemPrompt = `You are an expert e-commerce product photography analyst specializing in ${platform} listings.
+
+Analyze the product image and evaluate it based on these criteria:
+1. **Lighting** (0-100): Is the product well-lit? Natural lighting? No harsh shadows?
+2. **Composition** (0-100): Is the product centered? Good framing? Professional angles?
+3. **Clarity** (0-100): Is the image sharp and in focus? High resolution? Clear details?
+4. **Appeal** (0-100): Is it visually attractive? Does it showcase the product well? Engaging?
+
+Provide:
+- Individual scores for each criterion
+- An overall score (average of the 4 criteria)
+- Brief feedback explaining the scores
+- 3-5 specific suggestions for improvement
+
+Return your response as valid JSON with this exact structure:
+{
+  "lighting": number (0-100),
+  "composition": number (0-100),
+  "clarity": number (0-100),
+  "appeal": number (0-100),
+  "feedback": "Brief explanation of the scores",
+  "suggestions": ["suggestion 1", "suggestion 2", "suggestion 3"]
+}`;
+
+    // Call OpenAI Vision API
+    console.log(`[${requestId}] Calling OpenAI Vision API...`);
+    const completion = await openai.chat.completions.create({
+      model: 'gpt-4o',
+      messages: [
+        {
+          role: 'system',
+          content: systemPrompt,
+        },
+        {
+          role: 'user',
+          content: [
+            {
+              type: 'text',
+              text: `Analyze this ${platform} product image and provide detailed quality scores and suggestions for improvement.`,
+            },
+            {
+              type: 'image_url',
+              image_url: {
+                url: imageUrl,
+              },
+            },
+          ],
+        },
+      ],
+      response_format: { type: 'json_object' },
+      max_tokens: 1000,
+    });
+    
+    console.log(`[${requestId}] OpenAI Vision API call successful`);
+
+    const responseContent = completion.choices[0]?.message?.content;
+    
+    if (!responseContent) {
+      throw new Error('No response from OpenAI Vision');
+    }
+
+    // Parse AI response
+    const aiResponse = JSON.parse(responseContent);
+    
+    // Calculate overall score
+    const overallScore = Math.round(
+      (aiResponse.lighting + aiResponse.composition + aiResponse.clarity + aiResponse.appeal) / 4
+    );
+
+    const result: ImageAnalysisResult = {
+      score: overallScore,
+      lighting: aiResponse.lighting || 0,
+      composition: aiResponse.composition || 0,
+      clarity: aiResponse.clarity || 0,
+      appeal: aiResponse.appeal || 0,
+      feedback: aiResponse.feedback || 'Image analyzed successfully.',
+      suggestions: aiResponse.suggestions || [],
+    };
+
+    console.log(`[${requestId}] Image analysis complete: score=${overallScore}`);
+
+    // Return analysis result
+    return NextResponse.json({
+      ok: true,
+      ...result,
+      metadata: {
+        model: 'gpt-4o',
+        platform,
+        imageUrl,
+        requestId,
+      },
+    });
+
+  } catch (error: any) {
+    console.error(`[${requestId}] Error analyzing image:`, error);
+
+    // Handle validation errors
+    if (error instanceof z.ZodError) {
+      console.error(`[${requestId}] Validation error:`, error.issues);
+      return NextResponse.json(
+        {
+          ok: false,
+          error: {
+            code: 'validation_error',
+            message: 'Invalid input parameters',
+            details: error.issues,
+            requestId,
+          },
+        },
+        { status: 400 }
+      );
+    }
+
+    // Handle OpenAI errors
+    if (error?.status) {
+      console.error(`[${requestId}] OpenAI API error (${error.status}):`, error.message);
+      return NextResponse.json(
+        {
+          ok: false,
+          error: {
+            code: error.code || 'openai_error',
+            message: error.message,
+            requestId,
+          },
+        },
+        { status: error.status }
+      );
+    }
+
+    // Generic error
+    console.error(`[${requestId}] Unexpected error:`, error.message);
+    return NextResponse.json(
+      {
+        ok: false,
+        error: {
+          code: 'internal_error',
+          message: error.message || 'Failed to analyze image',
+          requestId,
+        },
+      },
+      { status: 500 }
+    );
+  }
+}
+
diff --git a/app/api/optimize/route.ts b/app/api/optimize/route.ts
index a19136c..d2c7a86 100644
--- a/app/api/optimize/route.ts
+++ b/app/api/optimize/route.ts
@@ -33,7 +33,7 @@ export async function GET() {
   return NextResponse.json({
     ok: true,
     status: 'optimize endpoint ready',
-    model: 'gpt-4o-mini',
+    model: 'gpt-4o',
     hasApiKey: !!process.env.OPENAI_API_KEY,
   });
 }
@@ -107,9 +107,9 @@ Photo Quality Score: ${photoScore}/100
 Generate 3 optimized variants that will maximize conversions and search visibility.`;
 
     // Call OpenAI API
-    console.log(`[${requestId}] Calling OpenAI API with model gpt-4o-mini...`);
+    console.log(`[${requestId}] Calling OpenAI API with model gpt-4o...`);
     const completion = await openai.chat.completions.create({
-      model: 'gpt-4o-mini',
+      model: 'gpt-4o',
       messages: [
         { role: 'system', content: systemPrompt },
         { role: 'user', content: userPrompt },
@@ -169,7 +169,7 @@ Generate 3 optimized variants that will maximize conversions and search visibili
       healthScore,
       rationale,
       metadata: {
-        model: 'gpt-4o-mini',
+        model: 'gpt-4o',
         platform,
         originalTitle: title,
         photoScore,
diff --git a/app/test/page.tsx b/app/test/page.tsx
index 1daae8e..d3e32e4 100644
--- a/app/test/page.tsx
+++ b/app/test/page.tsx
@@ -2,7 +2,52 @@
 
 import { useState } from 'react';
 
-export default function TestOptimizePage() {
+export default function TestPage() {
+  const [activeTab, setActiveTab] = useState<'optimize' | 'image'>('optimize');
+
+  return (
+    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-black text-white">
+      <div className="max-w-7xl mx-auto p-6 md:p-8">
+        {/* Header */}
+        <div className="mb-8">
+          <h1 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent mb-2">
+            Elite Listing AI
+          </h1>
+          <p className="text-gray-400 text-lg">Optimize your Etsy listings with AI-powered analysis</p>
+        </div>
+
+        {/* Tab Navigation */}
+        <div className="flex gap-2 mb-6 border-b border-gray-700">
+          <button
+            onClick={() => setActiveTab('optimize')}
+            className={`px-6 py-3 font-semibold transition-all ${
+              activeTab === 'optimize'
+                ? 'text-blue-400 border-b-2 border-blue-400'
+                : 'text-gray-400 hover:text-gray-300'
+            }`}
+          >
+            📝 Listing Optimizer
+          </button>
+          <button
+            onClick={() => setActiveTab('image')}
+            className={`px-6 py-3 font-semibold transition-all ${
+              activeTab === 'image'
+                ? 'text-purple-400 border-b-2 border-purple-400'
+                : 'text-gray-400 hover:text-gray-300'
+            }`}
+          >
+            🖼️ Image Analysis
+          </button>
+        </div>
+
+        {/* Tab Content */}
+        {activeTab === 'optimize' ? <OptimizeTab /> : <ImageAnalysisTab />}
+      </div>
+    </div>
+  );
+}
+
+function OptimizeTab() {
   const [platform, setPlatform] = useState('etsy');
   const [title, setTitle] = useState('');
   const [description, setDescription] = useState('');
@@ -53,185 +98,433 @@ export default function TestOptimizePage() {
   };
 
   return (
-    <div className="min-h-screen bg-black text-white p-8">
-      <div className="max-w-6xl mx-auto">
-        <h1 className="text-3xl font-bold mb-2">Elite Listing AI - Test Console</h1>
-        <p className="text-gray-400 mb-8">Test the /api/optimize endpoint</p>
-
-        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
-          {/* Form Section */}
-          <div className="bg-gray-900 rounded-lg p-6">
-            <h2 className="text-xl font-semibold mb-4">Input Form</h2>
-            <form onSubmit={handleSubmit} className="space-y-4">
-              <div>
-                <label className="block text-sm font-medium mb-2">
-                  Platform <span className="text-red-500">*</span>
-                </label>
-                <select
-                  value={platform}
-                  onChange={(e) => setPlatform(e.target.value)}
-                  className="w-full bg-gray-800 border border-gray-700 rounded px-3 py-2 text-white"
-                  required
-                >
-                  <option value="etsy">Etsy</option>
-                </select>
-              </div>
-
-              <div>
-                <label className="block text-sm font-medium mb-2">
-                  Title <span className="text-red-500">*</span>
-                </label>
-                <input
-                  type="text"
-                  value={title}
-                  onChange={(e) => setTitle(e.target.value)}
-                  placeholder="e.g., Vintage Leather Messenger Bag"
-                  className="w-full bg-gray-800 border border-gray-700 rounded px-3 py-2 text-white"
-                  required
-                />
-              </div>
+    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
+      {/* Form Section */}
+      <div className="bg-gray-800/50 backdrop-blur-sm rounded-xl p-6 border border-gray-700 shadow-xl">
+        <h2 className="text-2xl font-semibold mb-6 flex items-center gap-2">
+          <span className="text-blue-400">⚙️</span> Input Form
+        </h2>
+        <form onSubmit={handleSubmit} className="space-y-5">
+          <div>
+            <label className="block text-sm font-medium mb-2 text-gray-300">
+              Platform <span className="text-red-400">*</span>
+            </label>
+            <select
+              value={platform}
+              onChange={(e) => setPlatform(e.target.value)}
+              className="w-full bg-gray-900 border border-gray-600 rounded-lg px-4 py-2.5 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
+              required
+            >
+              <option value="etsy">Etsy</option>
+              <option value="shopify">Shopify</option>
+              <option value="ebay">eBay</option>
+              <option value="amazon">Amazon</option>
+            </select>
+          </div>
 
-              <div>
-                <label className="block text-sm font-medium mb-2">Description</label>
-                <textarea
-                  value={description}
-                  onChange={(e) => setDescription(e.target.value)}
-                  placeholder="Product description..."
-                  rows={4}
-                  className="w-full bg-gray-800 border border-gray-700 rounded px-3 py-2 text-white"
-                />
-              </div>
+          <div>
+            <label className="block text-sm font-medium mb-2 text-gray-300">
+              Title <span className="text-red-400">*</span>
+            </label>
+            <input
+              type="text"
+              value={title}
+              onChange={(e) => setTitle(e.target.value)}
+              placeholder="e.g., Handmade Ceramic Coffee Mug"
+              className="w-full bg-gray-900 border border-gray-600 rounded-lg px-4 py-2.5 text-white placeholder-gray-500 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
+              required
+            />
+          </div>
 
-              <div>
-                <label className="block text-sm font-medium mb-2">
-                  Tags (comma-separated)
-                </label>
-                <textarea
-                  value={tags}
-                  onChange={(e) => setTags(e.target.value)}
-                  placeholder="leather, vintage, bag, handmade"
-                  rows={2}
-                  className="w-full bg-gray-800 border border-gray-700 rounded px-3 py-2 text-white"
-                />
-              </div>
+          <div>
+            <label className="block text-sm font-medium mb-2 text-gray-300">Description</label>
+            <textarea
+              value={description}
+              onChange={(e) => setDescription(e.target.value)}
+              placeholder="Describe your product..."
+              rows={4}
+              className="w-full bg-gray-900 border border-gray-600 rounded-lg px-4 py-2.5 text-white placeholder-gray-500 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all resize-none"
+            />
+          </div>
 
-              <div>
-                <label className="block text-sm font-medium mb-2">
-                  Photo Score: {photoScore}
-                </label>
-                <input
-                  type="range"
-                  min="0"
-                  max="100"
-                  value={photoScore}
-                  onChange={(e) => setPhotoScore(Number(e.target.value))}
-                  className="w-full"
-                />
-                <div className="flex justify-between text-xs text-gray-500 mt-1">
-                  <span>0</span>
-                  <span>50</span>
-                  <span>100</span>
-                </div>
-              </div>
+          <div>
+            <label className="block text-sm font-medium mb-2 text-gray-300">
+              Tags (comma-separated)
+            </label>
+            <textarea
+              value={tags}
+              onChange={(e) => setTags(e.target.value)}
+              placeholder="ceramic, handmade, coffee, mug"
+              rows={2}
+              className="w-full bg-gray-900 border border-gray-600 rounded-lg px-4 py-2.5 text-white placeholder-gray-500 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all resize-none"
+            />
+          </div>
 
-              <button
-                type="submit"
-                disabled={loading}
-                className="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-gray-700 text-white font-semibold py-3 px-4 rounded transition-colors"
-              >
-                {loading ? 'Optimizing...' : 'Optimize Listing'}
-              </button>
-            </form>
+          <div>
+            <label className="block text-sm font-medium mb-2 text-gray-300">
+              Photo Score: <span className="text-blue-400 font-bold">{photoScore}</span>
+            </label>
+            <input
+              type="range"
+              min="0"
+              max="100"
+              value={photoScore}
+              onChange={(e) => setPhotoScore(Number(e.target.value))}
+              className="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer accent-blue-500"
+            />
+            <div className="flex justify-between text-xs text-gray-500 mt-1">
+              <span>Poor (0)</span>
+              <span>Average (50)</span>
+              <span>Excellent (100)</span>
+            </div>
           </div>
 
-          {/* Response Section */}
-          <div className="bg-gray-900 rounded-lg p-6">
-            <h2 className="text-xl font-semibold mb-4">Response</h2>
-            
-            {loading && (
-              <div className="flex items-center justify-center py-12">
-                <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
-              </div>
+          <button
+            type="submit"
+            disabled={loading}
+            className="w-full bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 disabled:from-gray-700 disabled:to-gray-800 text-white font-semibold py-3.5 px-6 rounded-lg transition-all shadow-lg hover:shadow-blue-500/50 disabled:shadow-none"
+          >
+            {loading ? (
+              <span className="flex items-center justify-center gap-2">
+                <svg className="animate-spin h-5 w-5" viewBox="0 0 24 24">
+                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none" />
+                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
+                </svg>
+                Optimizing...
+              </span>
+            ) : (
+              '✨ Optimize Listing'
             )}
+          </button>
+        </form>
+      </div>
 
-            {error && (
-              <div className="bg-red-900/50 border border-red-700 rounded p-4 mb-4">
-                <p className="text-red-300 font-semibold">Error:</p>
-                <p className="text-red-200">{error}</p>
-              </div>
-            )}
+      {/* Response Section */}
+      <div className="bg-gray-800/50 backdrop-blur-sm rounded-xl p-6 border border-gray-700 shadow-xl">
+        <h2 className="text-2xl font-semibold mb-6 flex items-center gap-2">
+          <span className="text-green-400">📊</span> Results
+        </h2>
+        
+        {loading && (
+          <div className="flex flex-col items-center justify-center py-20">
+            <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-blue-500 mb-4"></div>
+            <p className="text-gray-400">Analyzing your listing...</p>
+          </div>
+        )}
 
-            {response && !loading && (
-              <div className="space-y-4">
-                {response.ok ? (
-                  <>
-                    <div className="bg-green-900/50 border border-green-700 rounded p-4">
-                      <p className="text-green-300 font-semibold">✓ Success</p>
-                      <p className="text-green-200">
-                        Health Score: <span className="text-2xl font-bold">{response.healthScore}</span>
-                      </p>
-                      <p className="text-sm text-green-300 mt-2">
-                        Generated {response.variant_count} variants
+        {error && (
+          <div className="bg-red-900/30 border border-red-700 rounded-lg p-4 mb-4">
+            <p className="text-red-300 font-semibold mb-1">❌ Error</p>
+            <p className="text-red-200 text-sm">{error}</p>
+          </div>
+        )}
+
+        {response && !loading && (
+          <div className="space-y-4">
+            {response.ok ? (
+              <>
+                <div className="bg-gradient-to-r from-green-900/50 to-emerald-900/50 border border-green-700 rounded-lg p-5">
+                  <div className="flex items-center justify-between">
+                    <div>
+                      <p className="text-green-300 font-semibold mb-1">✅ Optimization Complete</p>
+                      <p className="text-sm text-green-200">
+                        Generated {response.variant_count} optimized variants
                       </p>
                     </div>
+                    <div className="text-center">
+                      <div className="text-4xl font-bold text-green-400">{response.healthScore}</div>
+                      <div className="text-xs text-green-300">Health Score</div>
+                    </div>
+                  </div>
+                </div>
+
+                {response.variants && response.variants.map((variant: any, idx: number) => (
+                  <div key={idx} className="bg-gray-900/70 border border-gray-600 rounded-lg p-5 hover:border-blue-500 transition-all">
+                    <div className="flex justify-between items-start mb-3">
+                      <h3 className="text-lg font-bold text-blue-400">Variant {idx + 1}</h3>
+                      <span className="bg-gradient-to-r from-blue-600 to-purple-600 text-white text-xs font-bold px-3 py-1 rounded-full">
+                        Score: {variant.copyScore}
+                      </span>
+                    </div>
+                    <p className="font-semibold text-white mb-3 text-lg">{variant.title}</p>
+                    <p className="text-sm text-gray-300 mb-4 leading-relaxed">{variant.description}</p>
+                    <div className="flex flex-wrap gap-2">
+                      {variant.tags && variant.tags.map((tag: string, i: number) => (
+                        <span
+                          key={i}
+                          className="bg-gray-700 hover:bg-gray-600 text-gray-200 text-xs px-3 py-1 rounded-full transition-colors"
+                        >
+                          #{tag}
+                        </span>
+                      ))}
+                    </div>
+                  </div>
+                ))}
 
-                    {response.variants && response.variants.map((variant: any, idx: number) => (
-                      <div key={idx} className="bg-gray-800 border border-gray-700 rounded p-4">
-                        <div className="flex justify-between items-start mb-2">
-                          <h3 className="text-lg font-semibold text-blue-400">Variant {idx + 1}</h3>
-                          <span className="bg-blue-600 text-white text-xs px-2 py-1 rounded">
-                            Score: {variant.copyScore}
-                          </span>
-                        </div>
-                        <p className="font-medium text-white mb-2">{variant.title}</p>
-                        <p className="text-sm text-gray-300 mb-3">{variant.description}</p>
-                        <div className="flex flex-wrap gap-1">
-                          {variant.tags && variant.tags.map((tag: string, i: number) => (
-                            <span
-                              key={i}
-                              className="bg-gray-700 text-gray-300 text-xs px-2 py-1 rounded"
-                            >
-                              {tag}
-                            </span>
-                          ))}
-                        </div>
-                      </div>
-                    ))}
-
-                    {response.rationale && (
-                      <div className="bg-gray-800 border border-gray-700 rounded p-4">
-                        <h3 className="text-sm font-semibold text-gray-400 mb-2">AI Rationale</h3>
-                        <p className="text-sm text-gray-300">{response.rationale}</p>
-                      </div>
-                    )}
-                  </>
-                ) : (
-                  <div className="bg-gray-800 border border-gray-700 rounded p-4">
-                    <p className="text-red-400 font-semibold mb-2">Request Failed</p>
-                    <pre className="text-xs text-gray-300 overflow-x-auto">
-                      {JSON.stringify(response, null, 2)}
-                    </pre>
+                {response.rationale && (
+                  <div className="bg-gray-900/70 border border-gray-600 rounded-lg p-5">
+                    <h3 className="text-sm font-semibold text-gray-400 mb-2 flex items-center gap-2">
+                      <span>💡</span> AI Strategy
+                    </h3>
+                    <p className="text-sm text-gray-300 leading-relaxed">{response.rationale}</p>
                   </div>
                 )}
 
-                <details className="bg-gray-800 border border-gray-700 rounded">
-                  <summary className="cursor-pointer p-4 font-semibold text-gray-400 hover:text-white">
-                    View Raw JSON
+                <details className="bg-gray-900/70 border border-gray-600 rounded-lg">
+                  <summary className="cursor-pointer p-4 font-semibold text-gray-400 hover:text-white transition-colors">
+                    🔍 View Raw JSON
                   </summary>
-                  <pre className="p-4 text-xs text-gray-300 overflow-x-auto border-t border-gray-700">
+                  <pre className="p-4 text-xs text-gray-300 overflow-x-auto border-t border-gray-700 bg-black/50">
                     {JSON.stringify(response, null, 2)}
                   </pre>
                 </details>
+              </>
+            ) : (
+              <div className="bg-gray-900/70 border border-red-600 rounded-lg p-4">
+                <p className="text-red-400 font-semibold mb-2">❌ Request Failed</p>
+                <pre className="text-xs text-gray-300 overflow-x-auto">
+                  {JSON.stringify(response, null, 2)}
+                </pre>
+              </div>
+            )}
+          </div>
+        )}
+
+        {!response && !loading && (
+          <div className="flex flex-col items-center justify-center py-20 text-gray-500">
+            <div className="text-6xl mb-4">📝</div>
+            <p className="text-lg">Fill out the form to optimize your listing</p>
+          </div>
+        )}
+      </div>
+    </div>
+  );
+}
+
+function ImageAnalysisTab() {
+  const [imageUrl, setImageUrl] = useState('');
+  const [platform, setPlatform] = useState('etsy');
+  const [loading, setLoading] = useState(false);
+  const [response, setResponse] = useState<any>(null);
+  const [error, setError] = useState<string | null>(null);
+
+  const handleSubmit = async (e: React.FormEvent) => {
+    e.preventDefault();
+    setLoading(true);
+    setError(null);
+    setResponse(null);
+
+    try {
+      const res = await fetch('/api/image/analyze', {
+        method: 'POST',
+        headers: {
+          'Content-Type': 'application/json',
+        },
+        body: JSON.stringify({
+          imageUrl,
+          platform,
+        }),
+      });
+
+      const data = await res.json();
+      setResponse(data);
+
+      if (!data.ok) {
+        setError(data.error?.message || 'Request failed');
+      }
+    } catch (err: any) {
+      setError(err.message);
+      setResponse({ error: err.message });
+    } finally {
+      setLoading(false);
+    }
+  };
+
+  const getScoreColor = (score: number) => {
+    if (score >= 80) return 'text-green-400';
+    if (score >= 60) return 'text-yellow-400';
+    return 'text-red-400';
+  };
+
+  const getScoreBg = (score: number) => {
+    if (score >= 80) return 'bg-green-500';
+    if (score >= 60) return 'bg-yellow-500';
+    return 'bg-red-500';
+  };
+
+  return (
+    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
+      {/* Form Section */}
+      <div className="bg-gray-800/50 backdrop-blur-sm rounded-xl p-6 border border-gray-700 shadow-xl">
+        <h2 className="text-2xl font-semibold mb-6 flex items-center gap-2">
+          <span className="text-purple-400">🖼️</span> Image Analysis
+        </h2>
+        <form onSubmit={handleSubmit} className="space-y-5">
+          <div>
+            <label className="block text-sm font-medium mb-2 text-gray-300">
+              Image URL <span className="text-red-400">*</span>
+            </label>
+            <input
+              type="url"
+              value={imageUrl}
+              onChange={(e) => setImageUrl(e.target.value)}
+              placeholder="https://example.com/product-image.jpg"
+              className="w-full bg-gray-900 border border-gray-600 rounded-lg px-4 py-2.5 text-white placeholder-gray-500 focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all"
+              required
+            />
+            <p className="text-xs text-gray-500 mt-1">Enter a publicly accessible image URL</p>
+          </div>
+
+          <div>
+            <label className="block text-sm font-medium mb-2 text-gray-300">
+              Platform
+            </label>
+            <select
+              value={platform}
+              onChange={(e) => setPlatform(e.target.value)}
+              className="w-full bg-gray-900 border border-gray-600 rounded-lg px-4 py-2.5 text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all"
+            >
+              <option value="etsy">Etsy</option>
+              <option value="shopify">Shopify</option>
+              <option value="ebay">eBay</option>
+              <option value="amazon">Amazon</option>
+            </select>
+          </div>
+
+          {imageUrl && (
+            <div className="border border-gray-600 rounded-lg p-3 bg-gray-900">
+              <p className="text-xs text-gray-400 mb-2">Preview:</p>
+              <img
+                src={imageUrl}
+                alt="Preview"
+                className="w-full h-48 object-contain rounded bg-gray-800"
+                onError={(e) => {
+                  (e.target as HTMLImageElement).style.display = 'none';
+                }}
+              />
+            </div>
+          )}
+
+          <button
+            type="submit"
+            disabled={loading}
+            className="w-full bg-gradient-to-r from-purple-600 to-purple-700 hover:from-purple-700 hover:to-purple-800 disabled:from-gray-700 disabled:to-gray-800 text-white font-semibold py-3.5 px-6 rounded-lg transition-all shadow-lg hover:shadow-purple-500/50 disabled:shadow-none"
+          >
+            {loading ? (
+              <span className="flex items-center justify-center gap-2">
+                <svg className="animate-spin h-5 w-5" viewBox="0 0 24 24">
+                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none" />
+                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
+                </svg>
+                Analyzing Image...
+              </span>
+            ) : (
+              '🔍 Analyze Image'
+            )}
+          </button>
+        </form>
+      </div>
+
+      {/* Response Section */}
+      <div className="bg-gray-800/50 backdrop-blur-sm rounded-xl p-6 border border-gray-700 shadow-xl">
+        <h2 className="text-2xl font-semibold mb-6 flex items-center gap-2">
+          <span className="text-green-400">📊</span> Analysis Results
+        </h2>
+        
+        {loading && (
+          <div className="flex flex-col items-center justify-center py-20">
+            <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-purple-500 mb-4"></div>
+            <p className="text-gray-400">Analyzing your image...</p>
+          </div>
+        )}
+
+        {error && (
+          <div className="bg-red-900/30 border border-red-700 rounded-lg p-4 mb-4">
+            <p className="text-red-300 font-semibold mb-1">❌ Error</p>
+            <p className="text-red-200 text-sm">{error}</p>
+          </div>
+        )}
+
+        {response && !loading && response.ok && (
+          <div className="space-y-4">
+            {/* Overall Score */}
+            <div className="bg-gradient-to-r from-purple-900/50 to-indigo-900/50 border border-purple-700 rounded-lg p-6 text-center">
+              <div className={`text-6xl font-bold mb-2 ${getScoreColor(response.score)}`}>
+                {response.score}
+              </div>
+              <div className="text-gray-300 text-sm">Overall Quality Score</div>
+            </div>
+
+            {/* Individual Scores */}
+            <div className="grid grid-cols-2 gap-3">
+              {[
+                { label: '💡 Lighting', value: response.lighting },
+                { label: '🎨 Composition', value: response.composition },
+                { label: '🔍 Clarity', value: response.clarity },
+                { label: '✨ Appeal', value: response.appeal },
+              ].map((item, idx) => (
+                <div key={idx} className="bg-gray-900/70 border border-gray-600 rounded-lg p-4">
+                  <div className="text-xs text-gray-400 mb-2">{item.label}</div>
+                  <div className="flex items-end gap-2">
+                    <div className={`text-3xl font-bold ${getScoreColor(item.value)}`}>
+                      {item.value}
+                    </div>
+                    <div className="text-gray-500 text-sm mb-1">/100</div>
+                  </div>
+                  <div className="w-full bg-gray-700 rounded-full h-2 mt-2">
+                    <div
+                      className={`h-2 rounded-full ${getScoreBg(item.value)}`}
+                      style={{ width: `${item.value}%` }}
+                    ></div>
+                  </div>
+                </div>
+              ))}
+            </div>
+
+            {/* Feedback */}
+            {response.feedback && (
+              <div className="bg-gray-900/70 border border-gray-600 rounded-lg p-5">
+                <h3 className="text-sm font-semibold text-gray-400 mb-2 flex items-center gap-2">
+                  <span>💬</span> Feedback
+                </h3>
+                <p className="text-sm text-gray-300 leading-relaxed">{response.feedback}</p>
               </div>
             )}
 
-            {!response && !loading && (
-              <div className="text-center py-12 text-gray-500">
-                <p>Submit the form to see results</p>
+            {/* Suggestions */}
+            {response.suggestions && response.suggestions.length > 0 && (
+              <div className="bg-gray-900/70 border border-gray-600 rounded-lg p-5">
+                <h3 className="text-sm font-semibold text-gray-400 mb-3 flex items-center gap-2">
+                  <span>💡</span> Suggestions for Improvement
+                </h3>
+                <ul className="space-y-2">
+                  {response.suggestions.map((suggestion: string, idx: number) => (
+                    <li key={idx} className="flex items-start gap-2 text-sm text-gray-300">
+                      <span className="text-purple-400 mt-0.5">•</span>
+                      <span>{suggestion}</span>
+                    </li>
+                  ))}
+                </ul>
               </div>
             )}
+
+            <details className="bg-gray-900/70 border border-gray-600 rounded-lg">
+              <summary className="cursor-pointer p-4 font-semibold text-gray-400 hover:text-white transition-colors">
+                🔍 View Raw JSON
+              </summary>
+              <pre className="p-4 text-xs text-gray-300 overflow-x-auto border-t border-gray-700 bg-black/50">
+                {JSON.stringify(response, null, 2)}
+              </pre>
+            </details>
           </div>
-        </div>
+        )}
+
+        {!response && !loading && (
+          <div className="flex flex-col items-center justify-center py-20 text-gray-500">
+            <div className="text-6xl mb-4">🖼️</div>
+            <p className="text-lg">Enter an image URL to analyze</p>
+          </div>
+        )}
       </div>
     </div>
   );
-- 
2.34.1

